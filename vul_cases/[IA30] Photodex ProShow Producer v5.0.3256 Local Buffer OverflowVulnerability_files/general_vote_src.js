// If we want to sepearate something out, not willing to share with third-party usage, then you should enter this script and write your stuff.
//
/*
	Documents:
		https://tornevall.net/tornedocs/votechdocumentsstart
	
	Data extraction explained:
		https://tornevall.net/tornedocs/data_extraction
*/

/*
	Frasexempel:
	((typeof t_phrases != "undefined" && typeof t_phrases.cleanmychoices != "undefined") ? t_phrases.cleanmychoices : "Rensa mina val")
*/

var $votech = jQuery.noConflict();

// A Tornevall networks method to make external calls on a body-onload. Since Tornevall Networks has the primary
// control of the onloads, we have also added the ability to call for customized onloads this way. If you are curious,
// you should take a look at https://tornevall.net/js/general.js for more information about this. However, you can
// use your own onload=func_onload_vote to call the functions at this place.
//
// This is your friendly helper, which should be able to handle a row of methods.
//
// * Cross-Site Scripted Method (meaning you use AJAX to fetch data from rest)
// * Regular scripting method (meaning you fetch needed variables by a script-tag)
//
function func_onload_vote()
{
	// Make sure we have a variable for contestant fetching. We will not pass this call via the function since we may want to use multiple polls somewhere
	if (typeof jsonObjectString === "string")
	{
		try
		{
			var votingObjectString = json(jsonObjectString);
			parseVotechObjects(votingObjectString);
		}
		catch (objectStringException)
		{
			alert("loadvoteException at parseVotechObject level: " + objectStringException);
		}
		return;
	}
	if (typeof arguments[0] !== "undefined")
	{
		try
		{
			if (parseInt(arguments[0]) > 0)
			{
				getContestants(arguments[0]);
			}
			else
			{
				alert("loadvoteException at int: Can not load a null project");
			}
		}
		catch (loadvote)
		{
			alert("loadvoteException at argument level: " + loadvote);
		}
	}
	else
	{
		try
		{
			getContestants(req_vote);
		}
		catch (loadvote)
		{
			alert("loadvoteException at getContestants level: " + loadvote);
		}
	}
}

var votechElements = "votech_p_";
if (typeof baseurl === "undefined")
{
	var baseurl = "//bbvote.se";
	var forcebase = true;
}
//var imagebase = "//votech.se/images/votech.se";
var imagebase = "//votech.se";

function openVoteCategory(id)
{
	if (id.length == 1)
	{
		ajax_fetch("getVoteCategories", "c="+id);
	}
}

function getVoteCategories(jsonCat)
{
	var jsonInfo;
	var destbox;
	
	for (var hash in jsonCat)
	{
		jsonInfo = (jsonCat[hash]);
		if (null != document.getElementById("voteListView_" + jsonInfo.destinationhash))
		{
			destbox = document.getElementById("voteListView_" + jsonInfo.destinationhash);
			destbox.innerHTML += '<blockquote><a href="/listpolls/'+jsonInfo.specname+'/">' + jsonInfo.projectcategory + '</a></blockquote><div id="'+jsonInfo.projecthash+'"</div>';
		}
		
	}
}

var contestantInterval = new Array();

function updateContestants(projectid)
{
	var ajaxref = getvar("ajaxref");
	ajax_fetch("/rest/project/" + projectid + "/get/contestants/list/tiny/" + (typeof ajaxref !== "undefined" && null != ajaxref ? "ajaxref/" + ajaxref + "/" : ""), "parseUpdatedVotechObjects");
}
function parseUpdatedVotechObjects(tinyObjectList)
{
	//alert(tinyObjectList);
	var projectid = tinyObjectList.projectid;
	var numvotes = "";
	$votech("#votech_" + projectid + "_h").val(tinyObjectList.votehash);

    var highSpan;
    var highSpanSeries;
    var lastSpanElement;

	for (var contestant in tinyObjectList.numvotes)
	{
		if (null != document.getElementById("votech_" + projectid + "_" + contestant + "_votes"))
		{
            if ($votech("#highcharts_" + projectid + "_" + contestant).length > 0)
            {
                if (null != document.getElementById("highcharts_" + projectid + "_" + contestant))
                {
                    highSpan = $votech("#highcharts_" + projectid + "_" + contestant).highcharts();
                    if (typeof highSpan !== "undefined")
                    {
                        highSpanSeries = highSpan.get("contestant-" + contestant);
                        try
                        {
                            lastSpanElement = highSpanSeries.data[highSpanSeries.data.length - 1];
				/*! TODO: Fix the bug that sets wrong sum on auto update  */
                            //lastSpanElement.update(tinyObjectList.numvotes[contestant]);
                        }
                        catch (e) {}
                    }
                }
            }
			document.getElementById("votech_" + projectid + "_" + contestant + "_votes").innerHTML = " (" + tinyObjectList.numvotes[contestant] + " "+((typeof t_phrases != "undefined" && typeof t_phrases.votes != "undefined") ? t_phrases.votes : "r&ouml;ster")+" - "+tinyObjectList.percentualsplit[contestant]+"%)";
		}
	}
}

function getContestants(projectid)
{
	if (projectid < 1) {return;}
	var hasContestantInterval = false;
	var extras = "";
	for (var pollIntervalCounters = 0 ; pollIntervalCounters < contestantInterval.length ; pollIntervalCounters ++)
	{
		if (contestantInterval[pollIntervalCounters] == projectid)
		{
			hasContestantInterval = true;
		}
	}
	if (!hasContestantInterval && projectid > 0)
	{
		contestantInterval.push(projectid);
		setInterval("updateContestants('"+projectid+"')", 5000)	// Autoupdate and protective stuff
	}
	if (typeof arguments[1] !== "undefined") {extras = arguments[1];}

	
	var ajaxref = getvar("ajaxref");
	if (typeof arguments[0] !== "undefined")
	{
		// Setting another value to true here, opens dynamic possibilites
		//var $vq = jQuery.noConflict();
		//var head = $vq("head");
		var scriptElement = document.createElement("script");
		// the baseurl is required for this function
		scriptElement.src = baseurl + "/rest/project/" + projectid + "/get/contestants/v/script/";
		scriptElement.onload = function()
		{
			var votingObjectString = json(jsonObjectString);
			parseVotechObjects(votingObjectString);
		}
		try
		{
			//head[0].appendChild(scriptElement);
			var head = document.getElementsByTagName('head')[0];
			head.appendChild(scriptElement);
		}
		catch (appendChildException)
		{
			error("appendChildException: " + appendChildException);
		}
	}
	else
	{
		if (parseInt(projectid) > 0)
		{
			var objectExtras = "";
			ajax_fetch("/rest/project/" + projectid + "/get/contestants/o/numvotes/d/desc/" + (typeof ajaxref !== "undefined" && null != ajaxref ? "ajaxref/" + ajaxref + "/" : ""), "parseVotechObjects");
		}
	}
}
var voteObjectsParse = new Array();
var voteSettingsParse = new Array();
var voteAboutMeParse = new Array();
var voteHashParse = "";
function parseVotechObjects(jsonObjects)
{
	var currentPoll = "";
	voteObjectsParse = Array();
	voteSettingsParse = Array();
	voteAboutMeParse = Array();
	voteHashParse = "";

	// jsonObjects.t_lang
	// Look for other languages
	if (typeof jsonObjects != "undefined" && typeof jsonObjects.t_lang != "undefined") {t_updateLanguage(jsonObjects.t_lang);}

	// If req_vote is missing, this means that this poll has been loaded with other methods than the regular.
	// In that case, try to get our pollid from the json object.
	try {if (typeof req_vote === "undefined") {req_vote = jsonObjects.projectid;}} catch (parseVotechObjectsException) {}
	try {voteSettingsParse = jsonObjects.projectsettings;} catch (settingsException) {error("parseVotechObjectsSettingsException: " + settingsException);}
	try {voteAboutMeParse = jsonObjects.me;} catch (settingsException) {error("parseVotechObjectsSettingsException: " + settingsException);}
	try {voteHashParse = jsonObjects.votehash;} catch (voteHashException) {error("voteHashException: " + voteHashException);}
	try {currentPoll = jsonObjects.projectid;} catch (parserSetPollException ) {error("parserSetPollException: " + parserSetPollException);}
	try
	{
		for (var voteObject in jsonObjects["contestantlist"])
		{
			if (null != jsonObjects["contestantlist"][voteObject].name)
			{
				voteObjectsParse.push(jsonObjects["contestantlist"][voteObject]);
			}
		}
	}
	catch (parseObjectException)
	{
		alert(parseObjectException);
		return;
	}
	if (typeof votechUserParse === "function")
	{
		// Call for custom parsing
		votechUserParse(voteObjectsParse, currentPoll, voteSettingsParse, voteHashParse, voteAboutMeParse);
	}
	else
	{
		votechGenerateGraph(voteObjectsParse, currentPoll, voteSettingsParse, voteHashParse, voteAboutMeParse);
	}
	//for (var ar = 0 ; ar < voteObjects.length ; ar ++) {alert(voteObjects[ar].name);}
}

function parseReqPoll(id)
{
	var getid = id.substring(id.indexOf("_")+1);
	return (getid.substring(0, getid.indexOf("_")));
}
function parseReqContestant(id)
{
	var getid = id.substring(id.indexOf("_")+1);
	getid = getid.substring(getid.indexOf("_")+1);
	return (getid.substring(0, getid.indexOf("_")));
}
function parse_e_url(id)
{
	var getid = id.substring(id.indexOf("_")+1);
	getid = getid.substring(getid.indexOf("_")+1);
	getid = getid.substring(getid.indexOf("_")+1);
	return (getid.substring(0, getid.indexOf("_")));
}


var voteOptionsLoad = new Object();
function setVoteOptions()
{
	// voteObjectOption
	if (typeof arguments[0] != "undefined") {voteObjectOption = arguments[0];} else {return null;}
	try {if (typeof voteObjectOption != "undefined" && typeof voteObjectOption != "undefined") {voteOptionsLoad = voteObjectOption;}} catch (e) {}
}
function votechGenerateGraph(jsonVoteObjects, currentProjectId, voteSettings, voteHash, voteAboutMe)
{
	if (typeof voteOptions == "object") {for (var voteopt in voteOptions) {voteSettings[voteopt] = voteOptions[voteopt];}}
	if (typeof voteOptionsLoad == "object") {for (var voteopt in voteOptionsLoad) {voteSettings[voteopt] = voteOptionsLoad[voteopt];}}
	var inputs = "votech_" + currentProjectId;
	var voteType = (typeof voteSettings.type === "string" ? voteSettings.type : null);
	try
	{
		var votechElementDestination = $votech("#" + votechElements + currentProjectId);
		var vofoot = false;
		if (getvar("tnet_domain") == null) {vofoot = true;}
		var votechElementDiv = document.createElement("div");
		votechElementDiv.setAttribute("id", "div_" + inputs);
		votechElementDiv.innerHTML = "";
		var borderStyle = "";

		var title = document.createElement("div");
		var eLink = "";
		var voteButtonText = (typeof voteSettings.votebuttontext === "string" ? voteSettings.votebuttontext : ((typeof t_phrases != "undefined" && typeof t_phrases.votebuttontext != "undefined") ? t_phrases.votebuttontext : "R�sta"));
		title.style.color = (typeof voteSettings.projectnamecolor === "string" ? voteSettings.projectnamecolor : "");
		title.style.fontWeight = (typeof voteSettings.projectnameweight === "string" ? voteSettings.projectnameweight : "");
		title.style.fontSize = (typeof voteSettings.projectnamesize === "string" ? voteSettings.projectnamesize : "");
		title.innerHTML = (typeof voteSettings.projectname === "string" ? voteSettings.projectname : "" );

		if (typeof h_origin === "string")
		{
			title.style.color = (typeof voteSettings.local_projectnamecolor === "string" ? voteSettings.local_projectnamecolor : "");
			title.style.fontWeight = (typeof voteSettings.local_projectnameweight === "string" ? voteSettings.local_projectnameweight : "");
			title.style.fontSize = (typeof voteSettings.local_projectnamesize === "string" ? voteSettings.local_projectnamesize : "");
		}


		if (voteSettings.test == "1")
		{
			title.innerHTML += ' (<i><span style="font-color:#990000;">test</span></i>)';

			var divTest = document.createElement("div");
			divTest.setAttribute("id", "div_" + inputs + "_test");
			divTest.setAttribute("style", "border: 1px solid #009900;width:150px;color:#000099;font-weight:normal;font-size:12px;");
			var divButtonClearVotes = document.createElement("button");
			divButtonClearVotes.setAttribute("id", inputs + "_clearVotesButton");
			divButtonClearVotes.setAttribute("name", inputs + "_clearVotesButton");

			var buttonText = document.createTextNode(((typeof t_phrases != "undefined" && typeof t_phrases.cleanmychoices != "undefined") ? t_phrases.cleanmychoices : "Rensa mina val"));
			divButtonClearVotes.appendChild(buttonText);
			divButtonClearVotes.onclick = function()
				{
					var chosenPoll = parseReqPoll(this.id);
					ajax_fetch(baseurl + "/vote/"+chosenPoll+"/test/removemyvotes/", "doRemoveMyVotes");
				};

			var divTestAlwaysVote = document.createElement("input");
			divTestAlwaysVote.setAttribute("id", inputs + "_testAlwaysVote");
			divTestAlwaysVote.setAttribute("name", inputs + "_testAlwaysVote");
			divTestAlwaysVote.setAttribute("type", "checkbox");
			divTestAlwaysVote.setAttribute("value", "1");
			var labelAlwaysVote = document.createElement("label");
			labelAlwaysVote.setAttribute('for', divTestAlwaysVote.id);
			labelAlwaysVote.innerHTML = "Obegr&auml;nsade r&ouml;ster<br>";
			divTest.appendChild(divTestAlwaysVote);
			divTest.appendChild(labelAlwaysVote);
			divTest.appendChild(divButtonClearVotes);
			var divTestResult = document.createElement("div");
			divTestResult.setAttribute("id", "votech_t_" + currentProjectId);
			divTest.appendChild(divTestResult);
			title.appendChild(divTest);
		}

		// Setting other defaults
		var highchartsHeight = 300;
		var divHeight = parseInt(highchartsHeight) + 50;
		if (voteType != "simple") {borderStyle += (typeof voteSettings.contestantdivborder === "string" ? voteSettings.contestantdivborder : "" );}
		if (typeof hasHighcharts != "undefined")
		{
			if (typeof voteSettings.nocharts != "undefined") {if (voteSettings.nocharts == true) {hasHighcharts = false;}} else {borderStyle += "height: " + divHeight + "px;";}
		}

		var notitle = (typeof voteSettings.notitle !== "undefined" ? voteSettings.notitle : "0");
		var noimage = (typeof voteSettings.noimage !== "undefined" ? voteSettings.noimage : "0");
		if (notitle == false) votechElementDiv.appendChild(title);
		var canVoteOnQuitters = voteSettings.can_vote_on_quitters;
		//voteSettings.multi = 1;
		// Of course, you can manipulate quite a lot of data here, but since everything is checked server side on the end, cheating here won't work
		var myCurrentChoice = voteAboutMe.cid;
		for (var obj in jsonVoteObjects)
		{
			var contestantDiv = document.createElement("div");
			contestantDiv.setAttribute("style", borderStyle);
			//contestantDiv.style.height = 
			var contestantId = jsonVoteObjects[obj].contestant;

			if (typeof hasHighcharts != "undefined")
			{
				ajax_fetch("/rest/project/" + currentProjectId + "/get/votes/contestantid/" + contestantId, "createHighchartsContestantLine");
			}
			
			if (myCurrentChoice == contestantId)
			{
				contestantDiv.style.backgroundColor = "#facbf8"; // cecece gives us weak gray
				contestantDiv.setAttribute("title", "My last choice");
			}
			var inputField = document.createElement('input');
			// Setting same format on both for now. Must fix later!
			if (voteSettings.contestantdivbr == "1")
			{
				var votesString = (typeof voteSettings.hideresultbeforevote === "string" && voteSettings.hideresultbeforevote == "0" ? " (" + jsonVoteObjects[obj].numvotes+" "+((typeof t_phrases != "undefined" && typeof t_phrases.votes != "undefined") ? t_phrases.votes : "r&ouml;ster")+" - "+jsonVoteObjects[obj].percentualsplit+"%)" : "");
			}
			else
			{
				var votesString = (typeof voteSettings.hideresultbeforevote === "string" && voteSettings.hideresultbeforevote == "0" ? " (" + jsonVoteObjects[obj].numvotes+" "+((typeof t_phrases != "undefined" && typeof t_phrases.votes != "undefined") ? t_phrases.votes : "r&ouml;ster")+" - "+jsonVoteObjects[obj].percentualsplit+"%)" : "");
			}

			if (voteSettings.multi == "0")
			{
				inputField.setAttribute("type", "radio");
				inputField.setAttribute("style", "width:30px;height:30px;");
				inputField.setAttribute("id", inputs + "_contestant");
				inputField.setAttribute("name", inputs + "_contestant");
			}
			else
			{
				inputField.setAttribute("type", "checkbox");
				inputField.setAttribute("id", inputs + "_contestant["+contestantId+"]");
				inputField.setAttribute("name", inputs + "_contestant["+contestantId+"]");
			}
			
			if (voteSettings.contestactive != "1" || voteAboutMe.nextvote > 0)
			{
				// if this poll is in testmode-state, allow more visibility (well, this still requires that the server is in same state)
				if (voteSettings.test != "1")
				{
					inputField.setAttribute("disabled", true);
					inputField.setAttribute("style", "display:none");
				}
			}
			else
			{
				if (jsonVoteObjects[obj].contestantactive != "1" && canVoteOnQuitters != "1" || voteAboutMe.nextvote > 0)
				{
					if (voteSettings.test != "1")
					{
						inputField.setAttribute("disabled", true);
						inputField.setAttribute("style", "display:none");
						contestantDiv.setAttribute("style", "display:none");
					}
				}
			}

			if (voteSettings.contestantdivbr == "1")
			{
				var inputVotesInformation = document.createElement("div");
			}
			else
			{
				var inputVotesInformation = document.createElement("span");
			}
			inputVotesInformation.setAttribute("id", inputs + "_"+contestantId+"_votes");
			inputVotesInformation.innerHTML = votesString;

			inputField.setAttribute("value", contestantId);
			var inputChoiceLabel = document.createElement("label");
			inputChoiceLabel.setAttribute('for', inputField.id);
			inputChoiceLabel.setAttribute('id', inputField.id);
			inputChoiceLabel.innerHTML = jsonVoteObjects[obj].name;

			var inputChoiceReadMore = document.createElement("div");
			inputChoiceReadMore.setAttribute("id", inputs + "_" + contestantId + "_" + jsonVoteObjects[obj].external_link_base64 + "_readmore");

			if (jsonVoteObjects[obj].external_link != "")
			{
				inputChoiceReadMore.innerHTML += ((typeof t_phrases != "undefined" && typeof t_phrases.readmore != "undefined") ? t_phrases.readmore : "L&auml;s mer");
				inputChoiceReadMore.onclick = function()
				{
					var eLink = baseurl + "/exiturl/" + parse_e_url(this.id) + "/";
					var contestantWindow = window.open(eLink, "ContestantWindow", "width=640,heigth=480");
				}
				inputChoiceReadMore.setAttribute("style", "cursor:pointer;font-size:12px;font-style:italic;font-weight:bold;color:#990000;background-color:#FFFFFF;border:1px dotted black;width:100px;text-align:center;padding:5px;margin:5px;box-shadow: 4px 4px 4px #888888;border-radius: 5px;");
			}

			inputChoiceLabel.setAttribute("title", votesString);
			var img = null;
			var imageurl = null;
			if (voteType != "simple")
			{
				img = document.createElement("img");
				if(typeof jsonVoteObjects[obj].image === "string")
				{
					if (jsonVoteObjects[obj].image != "" && noimage == "0" && jsonVoteObjects[obj].image.indexOf("contestants/noimage") == -1)
					{
						// New imagelinking rules as of 140831
						if (jsonVoteObjects[obj].image.toLowerCase().substring(0, 4) != "http") {imageurl = imagebase + jsonVoteObjects[obj].image;} else {imageurl = jsonVoteObjects[obj].image;}
						img.setAttribute("src", imageurl);
					}
				}
			}
			if (img != null)
			{
				contestantDiv.appendChild(img);
				//if (voteSettings.contestantdivbr == "1") {contestantDiv.innerHTML += "<br>";}
			}

			var useCharts = true;
			if (typeof voteSettings.nocharts != "undefined")
			{
				if (voteSettings.nocharts == true)
				{
					useCharts = false;
				}
			}

			if (typeof hasHighcharts != "undefined" && useCharts === true)
			{
				var highchartsSpan = document.createElement("span");
				highchartsSpan.setAttribute("id", "highcharts_" + currentProjectId + "_" + contestantId);
				highchartsSpan.setAttribute("style", "min-width: 700px; height: "+highchartsHeight+"px; margin: 0 auto; position: absolute; left: 300px;");
				contestantDiv.appendChild(highchartsSpan);
				contestantDiv.innerHTML += "<br>";
			}
			
			contestantDiv.appendChild(inputField);
			contestantDiv.appendChild(inputChoiceLabel);
			contestantDiv.appendChild(inputChoiceReadMore);
			contestantDiv.appendChild(inputVotesInformation);
			votechElementDiv.appendChild(contestantDiv);
		}
		var inputVoteButton = document.createElement("button");
		inputVoteButton.setAttribute("type", "button");
		inputVoteButton.setAttribute("id", inputs + "_votebutton");
		inputVoteButton.setAttribute("name", inputs + "_votebutton");
		inputVoteButton.setAttribute("value", "Vote");
		var buttonText = document.createTextNode(voteButtonText);
		inputVoteButton.appendChild(buttonText);
		inputVoteButton.onclick = function ()
		{
			var resturl = "";
			var chosenPoll = parseReqPoll(this.id);
			var votechInputFields = $votech("#votech_"+chosenPoll+"_contestant");
			var contestantarray = new Array();
			votechInputFields = document.getElementsByTagName("input");
			for (var vif = 0 ; vif < votechInputFields.length ; vif++ ) {if (votechInputFields[vif].id.indexOf("votech_"+chosenPoll+"_contestant") > -1) {if (votechInputFields[vif].checked) {contestantarray.push(votechInputFields[vif].value);}}}
			if (contestantarray.length > 0)
			{
				var extras = "";
				if ($votech("#votech_r_"+chosenPoll).length > 0) {$votech("#votech_r_"+chosenPoll).html('<img src="'+loader+'">');}
				if ($votech("#votech_"+chosenPoll+"_testAlwaysVote").length > 0 && document.getElementById("votech_"+chosenPoll+"_testAlwaysVote").checked) {extras = "/vav/1";}
				resturl = baseurl + "/vote/"+chosenPoll+"/set/" + contestantarray + "/h/" + $votech("#votech_"+chosenPoll+"_h").val() + extras;
				ajax_fetch(resturl, "setVote");
			}
			else
			{
				var nochoice = "Du m�ste v�lja n�got att r�sta p�";
				if ($votech("#votech_r_"+chosenPoll).length > 0) {$votech("#votech_r_"+chosenPoll).html(nochoice);} else {alert(nochoice);}
			}
		}

		var langLink = null;
		if (typeof flaglink != "undefined")
		{
			var langLink = document.createElement("div");
			langLink.innerHTML = flaglink;
		}

		var inputVoteHash = document.createElement("input");
		inputVoteHash.setAttribute("id", inputs + "_h");
		inputVoteHash.setAttribute("name", inputs + "_h");
		inputVoteHash.setAttribute("type", "hidden");
		inputVoteHash.setAttribute("value", voteHash);

		if (voteSettings.contestactive != "1" || voteAboutMe.nextvote > 0)
		{
			if (voteSettings.test != "1")
			{
				inputVoteButton.setAttribute("disabled", true);
				inputVoteButton.setAttribute("style", "display:");
			}
		}
		votechElementDiv.appendChild(inputVoteHash);
		votechElementDiv.appendChild(inputVoteButton);
		if (null != langLink)
		{
			votechElementDiv.appendChild(langLink);
		}
		if (voteSettings.contestactive == "0")
		{
			var notActive = document.createElement("div");
			notActive.setAttribute("style", "color:#000099;font-style:italic;");
			notActive.innerHTML = "Omr&ouml;stningen &auml;r ej aktiv";
			votechElementDiv.appendChild(notActive);
		}
		if (vofoot)
		{
			var voFoot = document.createElement("div");
			voFoot.setAttribute("style", "margin:3px;padding:3px;border:1px dashed gray;");
			var voA = document.createElement("a");
			voA.setAttribute("id", inputs + "_a");
			voA.setAttribute("href", "http://bbvote.se/vote/" + currentProjectId);
			voA.setAttribute("target", "_blank");
			var voAT = document.createTextNode("Powered by Votech");
			voA.setAttribute("style", "color:#990000;font-size:14px;font-style:italic;");
			voA.appendChild(voAT);
			voFoot.setAttribute("id", inputs + "_vf");
			voFoot.appendChild(voA);
			votechElementDiv.appendChild(voFoot);
		}
		votechElementDestination.html(votechElementDiv);
	}
	catch (votechGraphException)
	{
		error(votechGraphException);
	}
}

function setVote(voteResult)
{
	if(voteResult.error != "0")
	{
		if ($votech("#votech_r_"+voteResult.project).length > 0)
		{
			$votech("#votech_r_"+voteResult.project).html(voteResult.messages);
		}
		else
		{
			alert(voteResult.messages);
		}
	}
	else
	{
		//getContestants(voteResult.project);
		updateContestants(voteResult.project);
		if ($votech("#votech_r_"+voteResult.project).length > 0)
		{
			$votech("#votech_r_"+voteResult.project).html(voteResult.messages);
		}
		else
		{
			if (typeof voteResult.messages != "undefined")
			{
				alert(voteResult.messages);
			}
		}
	}
}

function doRemoveMyVotes(testResult)
{
	try
	{
		updateContestants(voteResult.project);
		//alert(testResult.messages);
	}
	catch (testResultException) {}
}

function createHighchartsContestantLine(contestantObject)
{
	var currentProjectid = contestantObject.projectid;

	for (var cObj in contestantObject.contestants)
	{
		var xAxisCat = new Array();
		var hSeries = new Array();
		var highSpan = ($votech("#highcharts_" + currentProjectid + "_" + cObj));
		for (var datevote in contestantObject.contestants[cObj].votes)
		{
			xAxisCat.push(datevote);
			hSeries.push(contestantObject.contestants[cObj].votes[datevote]);
		}
		var setSeries = "["+hSeries+"]";
		highSpan.highcharts(
			{
				chart: {
					type: 'line',
					zoomType: 'x',
					spacingRight: 20
				},
				tooltip: {
					valueDecimals: 0,
					yDecimals: 0
				},
				title: {text: ((typeof t_phrases != "undefined" && typeof t_phrases.dailyvotesnoupdate != "undefined") ? t_phrases.dailyvotesnoupdate : 'Daglig r&ouml;stning (Uppdateras inte automatiskt)')},
				xAxis:
				{
					categories: xAxisCat,
				},
				yAxis:
				{
					title: {text: "Number of votes"	},
					labels: {
						format: '{value:.0f}'
					}
				},
				plotOptions:
				{
					line: {
						dataLabels: {enabled: true},
						enableMouseTracking: true
					}
				},
				series: [{
                         id: "contestant-" + cObj,
						 name: contestantObject.contestants[cObj].name,
						 data: eval(setSeries)
						 }]
			}
		);
	}
}

function viewVoterefPopup(id)
{
	ajax_fetch(baseurl + "/voteref/" + id + "/popup/true/", "voteRefHtml");
}
function voteRefHtml(content)
{
	var htmlContent = unescape(content);
	if (null != document.getElementById("popoverbox"))
	{
		if (null != document.getElementById("divVoteRefContent"))
		{
			document.getElementById("divVoteRefContent").innerHTML = htmlContent;
		}
		else
		{
			var divVoteRefContent = document.createElement("div");
			divVoteRefContent.setAttribute("id", "divVoteRefContent");
			divVoteRefContent.setAttribute("style", "position:asolute;z-index: 2;height: 150px, width:300px; backgroundColor: #eaeaea;");
			divVoteRefContent.innerHTML = htmlContent;
			document.getElementById("popoverbox").appendChild(divVoteRefContent);
		}
	}
}
